"""
РАБОТАЕТ С ФУНКЦИЯИ И С НЕИЗМЕНЯЕМЫМЫ ТИПАММЫ ДАННЫХ (АРГУМЕНТЫ ФУНКЦИИ)

lru_cache - это же чучуть меного кешырования по стравнению с cached_property, задумка слудующая
есть функция, которая принимает определенные параметры (Аргументы) когда мы передали аргументы
происходит вычисления и сохраняеться. в этот момент мы закешыровали аргументы которые передавали
и рузультат который получился. Если мы повторно вцызываем функцию с темиже аргументами то вернеться
уже расчитанное значения. Если бубедт вызвана функция уже с другими аргументами то будет происходить
расчет и сохранения результата и аргументов. Таким образом мы храним результаты для определенных 
аргументво

"""

from functools import lru_cache

@lru_cache(maxsize=20)
def fib(n):
    if n < 2:
        return n
    return fib(n-1) + fib(n-2)

print(fib(10))  # 55 - результат вычисления

# Печатает информацию о кэше
print(fib.cache_info())  
# CacheInfo(hits=8, misses=11, maxsize=20, currsize=11)
# hits - количество удачных обращений к кешу
# misses - количество промахов, когда результат был не в кеше
# maxsize - максимальный размер кеша 
# currsize - Текущий размер кеша


# ВТОРОЙ ПРИМЕР - СО ВСЕМИ НЕИЗМЕНЯЕМЫМИ ТИПАМИ ДАННЫХ
@lru_cache(maxsize=20)
def calkulete(data):
    return data

# Примеры неизменяемых данных
calkulete(10)         # int
calkulete(3.14)       # float
calkulete(1 + 2j)     # complex
calkulete(True)       # bool
calkulete("Hello")    # str
calkulete((1, 2, 3))  # tuple
calkulete(frozenset([1, 2, 3]))  # frozenset
calkulete(b"bytes")   # bytes

# Повторный вызов будет использовать кэш:
calkulete(10)  # Кэшированное значение



"""
Особенности

1. Кэширование результатов: Сохраняет результаты вызовов функции с определёнными аргументами.
2. Ограничение размера кэша: Хранит ограниченное число записей. Старые записи удаляются по принципу "наименее используемые удаляются первыми".
3. Простота использования: Добавляется как декоратор и не требует изменений в коде функции.
4. Работает только с функциями, аргументы которых являются хэшируемыми (например, числа, строки, кортежи).
"""