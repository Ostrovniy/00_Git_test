"""
Зависимость — это базовая связь между классами, которая показывает, что один класс скорее всего придётся менять
при изменении названия или сигнатуры методов второго. Зависимость появляется там, где вы указываете конкретные
названия классов — в вызовах конструкторов, при указании типов параметров и возвращаемых значений методов и так
далее.

--- Зависимость выражается в том, что один объект использует другой как параметр, но при этом не хранит его ссылку.
"""

class Color:
    def __init__(self, data):
        self.data = data
    
    def get_rgba(self):
        return (122, 122, 144)

class Box:
    def __init__(self, name):
        self.name = name

    def set_color(self, color: Color):
        # Принимает класса Color и вызываем у него метод get_rgba - это точка зависимости, от названия класса и метода и принимаемых параметров
        res = color.get_rgba()
        print(res)

box = Box('Коробка')
col = Color('#555')
box.set_color(col) # (122, 122, 144)

"""
Внутри класса Бокс идет работать с классом Цвет и его методом, в случаее изменения класса Цвет (Названиея, название методов или парамтеров)
Возможно прийдеться редактировать класс Бокс. 

Сама задумка связи заключаеться в том, что мы не храним ссылку на цвет в классе, а получаем  определенный результат и забываем про класс Цвет
а дальше уже работаем непосредственно с полученым результатом
"""

"""
Ключевые различия
Ассоциация — постоянная связь, объекты хранят ссылки друг на друга как часть своей структуры.
Зависимость — временная связь, объект передается в метод и используется внутри него.
"""