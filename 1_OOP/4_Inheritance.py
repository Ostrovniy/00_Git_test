"""
Наследование позволяет создавать новый класс на основе уже существующего класса. Наряду с инкапсуляцией наследование 
является одним из краеугольных камней объектно-ориентированного программирования.

Ключевыми понятиями наследования являются подкласс и суперкласс. Подкласс наследует от суперкласса все публичные 
атрибуты и методы. Суперкласс еще называется базовым (base class) или родительским (parent class), а подкласс - производным (derived class) или дочерним (child class).

https://metanit.com/python/tutorial/7.3.php
"""

# 1. Базовый класс который определяет Автомодиль
class Car:
    def __init__(self, name, year):
        self.name = name
        self.year = year

    # метод который мы переопределим
    def info(self):
        print('car -> info')
    
    # Этот метод переопределять не будем
    def param(self):
        print(f'Car -> param {self.name} {self.year}')

class ElectroCar(Car):
    def __init__(self, name, year, power):
        # Прокидываем параметры
        super().__init__(name, year)
        # параметр который есть только в классе ElectroCar
        self.power = power

    # переопределили метод с родительского класса
    def info(self):
        print('ElectroCar -> info')

    # Метод которые есть только в классе ElectroCar
    def add(self):
        print('ElectroCar -> add')


# Пример использования
car = ElectroCar('tesla', 1998, '2300W')
car.info()      # ElectroCar -> info // Потому что мы переоределили метод в класса ElectroCar   (Переопределения метода)
car.param()     # Car -> param tesla 1998 // Вызов храниться в Car мы его не переопределяли     (Использования наследуемого метода)
car.add()       # ElectroCar -> add // метод котоые есть только к ласса ElectroCar              (Добавления своего метода в сощданный класс)




"""
Как я поняла, мы модем наследоваться от родительского класса а также от какого интерфейса, комбинирование так сказать
"""