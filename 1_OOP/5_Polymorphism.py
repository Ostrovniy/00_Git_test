"""
Полиморфизм — это один из четырех основных принципов объектно-ориентированного программирования (ООП), 
наряду с наследованием, инкапсуляцией и абстракцией. Он позволяет объектам разных классов обрабатывать вызовы методов 
с одинаковыми именами, но реализовывать их по-своему.

С полиморфизмом вы можете вызывать методы у объектов, даже если они относятся к разным классам, при условии, 
что эти методы имеют одинаковые имена и параметры. Это упрощает создание кода, который можно расширять и изменять без изменения основной логики.
"""

# У класа есть метод test
class A:
    def __init__(self):
        pass
    
    def test(self):
        print('A:test')

# У класа есть метод test
class B:
    def __init__(self):
        pass

    def test(self):
        print('B:test')

# У класа есть метод test
class C:
    def __init__(self):
        pass

    def test(self):
        print('C:test')

# Добавляем в дату, по 10 екземпляров каждого класса A,B, C
data = []
for i in range(10):
    data.append(A())
    data.append(B())
    data.append(C())

# Использование Полиморфизма, вызываем у любого елемента списка метод test
for i in data:
    i.test()

# A:test
# B:test
# C:test
# A:test
# B:test
# C:test

"""
ГДЕ МОЖНО ИСПОЛЬЗОВАТЬ

К примеру в игре могут быть разные классы которые нужно рендерить и у классов будет метод рендера
К примеру есть сцена где нужно влем елементам сцены расчитать смещение DX, обновить положение текущее
"""